name: Playwright Tests with GitHub Pages Reports

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Run Playwright Tests
        run: npx playwright test
        env:
          CI: true

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-html-report
          path: playwright-report/
          retention-days: 30

      - name: Upload Test Results JSON
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-json
          path: test-results/results.json
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  report:
    name: Process Test Reports
    runs-on: ubuntu-latest
    needs: test
    if: always()
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download HTML Report
        uses: actions/download-artifact@v4
        with:
          name: playwright-html-report
          path: current-report/

      - name: Download Test Results JSON
        uses: actions/download-artifact@v4
        with:
          name: test-results-json
          path: test-json/

      - name: Parse and Display Results
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY

          if [ -f "test-json/results.json" ]; then
            # Extract metrics using jq from Playwright's results.json
            total=$(jq -r '[.suites[].specs[] | length] | add // 0' test-json/results.json)
            passed=$(jq -r '[.suites[].specs[].tests[] | select(.results[].status == "passed")] | length' test-json/results.json)
            failed=$(jq -r '[.suites[].specs[].tests[] | select(.results[].status == "failed")] | length' test-json/results.json)
            skipped=$(jq -r '[.suites[].specs[].tests[] | select(.results[].status == "skipped")] | length' test-json/results.json)
            
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Total Tests | $total |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
            echo "| ❌ Failed | $failed |" >> $GITHUB_STEP_SUMMARY
            echo "| ⏭️ Skipped | $skipped |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add status message
            if [ "$failed" -gt 0 ]; then
              echo "❌ **Test run completed with failures!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Extract and display failed tests
              echo "## 💥 Failed Tests" >> $GITHUB_STEP_SUMMARY
              echo "| Test Name | Error Message |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|---------------|" >> $GITHUB_STEP_SUMMARY
              
              # Get failed tests from Playwright results.json
              jq -r '.suites[].specs[].tests[] | select(.results[].status == "failed") | "| " + .title + " | " + (.results[].error.message // "No error message") + " |"' test-json/results.json >> $GITHUB_STEP_SUMMARY
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check the test artifacts for detailed failure information." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Test results JSON not found!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');

            try {
              const reportPath = 'test-json/results.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                // Calculate test statistics from Playwright results
                let total = 0, passed = 0, failed = 0, skipped = 0;
                
                report.suites.forEach(suite => {
                  suite.specs.forEach(spec => {
                    spec.tests.forEach(test => {
                      total++;
                      const status = test.results[0]?.status;
                      if (status === 'passed') passed++;
                      else if (status === 'failed') failed++;
                      else if (status === 'skipped') skipped++;
                    });
                  });
                });
                
                const passRate = total > 0 ? ((passed / total) * 100).toFixed(1) : '0.0';
                
                let comment = `## 🧪 Playwright Test Results
                
                | Metric | Value |
                |--------|-------|
                | 📊 Total Tests | ${total} |
                | ✅ Passed | ${passed} |
                | ❌ Failed | ${failed} |
                | ⏭️ Skipped | ${skipped} |
                | 📈 Pass Rate | ${passRate}% |
                `;
                
                if (failed > 0) {
                  comment += `\n❌ **${failed} test(s) failed!**\n\n## 💥 Failed Tests\n\n| Test Name | Error Message |\n|-----------|---------------|\n`;
                  
                  report.suites.forEach(suite => {
                    suite.specs.forEach(spec => {
                      spec.tests.forEach(test => {
                        if (test.results[0]?.status === 'failed') {
                          const errorMsg = (test.results[0]?.error?.message || 'No error message')
                            .replace(/\|/g, '\\|')
                            .replace(/\n/g, ' ')
                            .substring(0, 100) + (test.results[0]?.error?.message?.length > 100 ? '...' : '');
                          comment += `| ${test.title} | ${errorMsg} |\n`;
                        }
                      });
                    });
                  });
                  
                  comment += `\nCheck the [workflow run](${context.payload.pull_request.html_url}/checks) for details.`;
                } else {
                  comment += '\n✅ **All tests passed!** Great job! 🎉';
                }
                
                comment += '\n\n---\n*Generated by Playwright Reporter*';
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Error processing report:', error);
            }

      - name: Setup Pages Branch and Deploy Reports
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create timestamp and branch name
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          RUN_ID="${{ github.run_id }}"
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"

          # Try to checkout existing gh-pages branch or create new one
          git fetch origin gh-pages:gh-pages 2>/dev/null || git checkout --orphan gh-pages
          git checkout gh-pages 2>/dev/null || echo "Created new gh-pages branch"

          # Create directory structure
          mkdir -p reports/$TIMESTAMP-$RUN_ID

          # Copy current report to timestamped directory
          if [ -d "current-report" ]; then
            cp -r current-report/* reports/$TIMESTAMP-$RUN_ID/
          fi

          # Copy test results JSON
          if [ -f "test-json/results.json" ]; then
            cp test-json/results.json reports/$TIMESTAMP-$RUN_ID/
          fi

          # Create/update index.html with report listing
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Playwright Test Reports</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                      margin: 40px auto;
                      max-width: 1200px;
                      padding: 0 20px;
                      background: #f8f9fa;
                  }
                  .header {
                      background: white;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      margin-bottom: 30px;
                  }
                  .reports-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                      gap: 20px;
                  }
                  .report-card {
                      background: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      transition: transform 0.2s;
                  }
                  .report-card:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                  }
                  .report-title {
                      font-size: 18px;
                      font-weight: 600;
                      margin-bottom: 10px;
                      color: #2d3748;
                  }
                  .report-meta {
                      color: #718096;
                      font-size: 14px;
                      margin-bottom: 15px;
                  }
                  .report-link {
                      display: inline-block;
                      background: #3182ce;
                      color: white !important;
                      padding: 8px 16px;
                      border-radius: 6px;
                      text-decoration: none;
                      font-weight: 500;
                      transition: background 0.2s;
                  }
                  .report-link:hover {
                      background: #2c5aa0;
                  }
                  .status-badge {
                      display: inline-block;
                      padding: 4px 8px;
                      border-radius: 4px;
                      font-size: 12px;
                      font-weight: 500;
                      margin-left: 10px;
                  }
                  .status-success { background: #c6f6d5; color: #22543d; }
                  .status-failure { background: #fed7d7; color: #c53030; }
                  .latest-badge {
                      background: #805ad5;
                      color: white;
                      padding: 4px 8px;
                      border-radius: 4px;
                      font-size: 12px;
                      font-weight: 500;
                      margin-left: 10px;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🧪 Playwright Test Reports</h1>
                  <p>Historical test reports for this repository. Click on any report to view detailed results.</p>
              </div>
              <div class="reports-grid" id="reports">
                  <!-- Reports will be populated by JavaScript -->
              </div>
              
              <script>
                  async function loadReports() {
                      try {
                          const response = await fetch('./reports-index.json');
                          const reports = await response.json();
                          
                          const reportsContainer = document.getElementById('reports');
                          reportsContainer.innerHTML = '';
                          
                          reports.forEach((report, index) => {
                              const card = document.createElement('div');
                              card.className = 'report-card';
                              
                              const status = report.failed > 0 ? 'failure' : 'success';
                              const statusText = report.failed > 0 ? 'Failed' : 'Passed';
                              
                              card.innerHTML = `
                                  <div class="report-title">
                                      Test Run #${report.runId}
                                      ${index === 0 ? '<span class="latest-badge">Latest</span>' : ''}
                                      <span class="status-badge status-${status}">${statusText}</span>
                                  </div>
                                  <div class="report-meta">
                                      <div><strong>Branch:</strong> ${report.branch}</div>
                                      <div><strong>Commit:</strong> ${report.commit.substring(0, 7)}</div>
                                      <div><strong>Date:</strong> ${new Date(report.timestamp).toLocaleString()}</div>
                                      <div><strong>Tests:</strong> ${report.total} total, ${report.passed} passed, ${report.failed} failed</div>
                                  </div>
                                  <a href="./reports/${report.directory}/index.html" class="report-link">
                                      View Report →
                                  </a>
                              `;
                              
                              reportsContainer.appendChild(card);
                          });
                      } catch (error) {
                          console.error('Error loading reports:', error);
                          document.getElementById('reports').innerHTML = '<p>Error loading reports. Please check the console.</p>';
                      }
                  }
                  
                  loadReports();
              </script>
          </body>
          </html>
          EOF

          # Create/update reports index JSON
          REPORTS_JSON="[]"
          if [ -f "reports-index.json" ]; then
            REPORTS_JSON=$(cat reports-index.json)
          fi

          # Extract test results from Playwright results.json
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0

          if [ -f "test-json/results.json" ]; then
            TOTAL_TESTS=$(jq -r '[.suites[].specs[] | length] | add // 0' test-json/results.json)
            PASSED_TESTS=$(jq -r '[.suites[].specs[].tests[] | select(.results[].status == "passed")] | length' test-json/results.json)
            FAILED_TESTS=$(jq -r '[.suites[].specs[].tests[] | select(.results[].status == "failed")] | length' test-json/results.json)
          fi

          # Add new report entry to the beginning of the array
          NEW_ENTRY=$(jq -n \
            --arg timestamp "$(date -Iseconds)" \
            --arg directory "$TIMESTAMP-$RUN_ID" \
            --arg branch "$BRANCH_NAME" \
            --arg commit "$COMMIT_SHA" \
            --arg runId "$RUN_ID" \
            --argjson total "$TOTAL_TESTS" \
            --argjson passed "$PASSED_TESTS" \
            --argjson failed "$FAILED_TESTS" \
            '{
              timestamp: $timestamp,
              directory: $directory,
              branch: $branch,
              commit: $commit,
              runId: $runId,
              total: $total,
              passed: $passed,
              failed: $failed
            }')

          # Update reports index (keep only last 50 reports)
          echo "$REPORTS_JSON" | jq --argjson new "$NEW_ENTRY" '. = [$new] + . | .[0:50]' > reports-index.json

          # Add all files to git
          git add .

          # Commit changes
          git commit -m "Add test report for run $RUN_ID ($(date))" || echo "No changes to commit"

          # Push to gh-pages branch
          git push origin gh-pages

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          branch: gh-pages
          folder: .
