name: Playwright Tests with CTRF Reports

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Add permissions for GitHub Pages and repository writes
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Tests
        run: npx playwright test
        env:
          CI: true

      - name: Upload CTRF Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ctrf-report
          path: test-results/ctrf-report.json
          retention-days: 30

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-html-report
          path: playwright-report/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  report:
    name: Process Test Reports
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download CTRF Report
        uses: actions/download-artifact@v4
        with:
          name: ctrf-report
          path: reports/

      - name: Download HTML Report
        uses: actions/download-artifact@v4
        with:
          name: playwright-html-report
          path: html-report/

      - name: Parse and Display Results
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY

          if [ -f "reports/ctrf-report.json" ]; then
            # Extract metrics using jq
            total=$(jq -r '.results.summary.tests' reports/ctrf-report.json)
            passed=$(jq -r '.results.summary.passed' reports/ctrf-report.json)
            failed=$(jq -r '.results.summary.failed' reports/ctrf-report.json)
            skipped=$(jq -r '.results.summary.skipped' reports/ctrf-report.json)
            duration=$(jq -r '.results.summary.stop - .results.summary.start' reports/ctrf-report.json)
            
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Total Tests | $total |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
            echo "| ❌ Failed | $failed |" >> $GITHUB_STEP_SUMMARY
            echo "| ⏭️ Skipped | $skipped |" >> $GITHUB_STEP_SUMMARY
            echo "| ⏱️ Duration | ${duration}ms |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add status message
            if [ "$failed" -gt 0 ]; then
              echo "❌ **Test run completed with failures!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Extract and display failed tests
              echo "## 💥 Failed Tests" >> $GITHUB_STEP_SUMMARY
              echo "| Test Name | Error Message |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|---------------|" >> $GITHUB_STEP_SUMMARY
              
              # Get failed tests from CTRF report
              jq -r '.results.tests[] | select(.status == "failed") | "| " + .name + " | " + (.message // "No error message") + " |"' reports/ctrf-report.json >> $GITHUB_STEP_SUMMARY
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check the test artifacts for detailed failure information." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ CTRF report not found!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create GitHub Pages Structure
        run: |
          # Create a pages directory structure
          mkdir -p pages

          # Copy HTML report to pages directory
          if [ -d "html-report" ]; then
            cp -r html-report/* pages/
          fi

          # Copy CTRF report for API access
          mkdir -p pages/api
          if [ -f "reports/ctrf-report.json" ]; then
            cp reports/ctrf-report.json pages/api/
          fi

          # Create an index.html if it doesn't exist
          if [ ! -f "pages/index.html" ]; then
            cat > pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Test Reports</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .header { text-align: center; margin-bottom: 40px; }
                  .card { background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0; }
                  .btn { display: inline-block; padding: 10px 20px; background: #0066cc; color: white; text-decoration: none; border-radius: 5px; margin: 10px 5px; }
                  .btn:hover { background: #0052a3; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🧪 Test Reports Dashboard</h1>
                      <p>Latest test execution results and reports</p>
                  </div>
                  
                  <div class="card">
                      <h2>📊 Available Reports</h2>
                      <a href="./index.html" class="btn">📝 HTML Report</a>
                      <a href="./api/ctrf-report.json" class="btn">📋 JSON Report</a>
                  </div>
                  
                  <div class="card">
                      <h2>📈 Latest Results</h2>
                      <p>Last updated: <span id="timestamp"></span></p>
                      <div id="results-summary">Loading...</div>
                  </div>
              </div>
              
              <script>
                  document.getElementById('timestamp').textContent = new Date().toLocaleString();
                  
                  // Load and display CTRF results
                  fetch('./api/ctrf-report.json')
                      .then(response => response.json())
                      .then(data => {
                          const summary = data.results.summary;
                          const html = `
                              <table style="width: 100%; border-collapse: collapse;">
                                  <tr><td style="padding: 8px; border: 1px solid #ddd;"><strong>Total Tests:</strong></td><td style="padding: 8px; border: 1px solid #ddd;">${summary.tests}</td></tr>
                                  <tr><td style="padding: 8px; border: 1px solid #ddd;"><strong>Passed:</strong></td><td style="padding: 8px; border: 1px solid #ddd; color: green;">${summary.passed}</td></tr>
                                  <tr><td style="padding: 8px; border: 1px solid #ddd;"><strong>Failed:</strong></td><td style="padding: 8px; border: 1px solid #ddd; color: red;">${summary.failed}</td></tr>
                                  <tr><td style="padding: 8px; border: 1px solid #ddd;"><strong>Skipped:</strong></td><td style="padding: 8px; border: 1px solid #ddd;">${summary.skipped}</td></tr>
                                  <tr><td style="padding: 8px; border: 1px solid #ddd;"><strong>Duration:</strong></td><td style="padding: 8px; border: 1px solid #ddd;">${summary.stop - summary.start}ms</td></tr>
                              </table>
                          `;
                          document.getElementById('results-summary').innerHTML = html;
                      })
                      .catch(error => {
                          document.getElementById('results-summary').innerHTML = 'Unable to load test results.';
                      });
              </script>
          </body>
          </html>
          EOF
          fi

          # Add timestamp and run info
          echo "<!-- Last updated: $(date) -->" >> pages/index.html
          echo "<!-- Run ID: ${{ github.run_id }} -->" >> pages/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          publish_branch: gh-pages
          keep_files: false
          enable_jekyll: false
          commit_message: "Deploy test reports from ${{ github.sha }}"
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"

      - name: Comment PR with Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');

            try {
              const reportPath = 'reports/ctrf-report.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                const summary = report.results.summary;
                
                const passRate = ((summary.passed / summary.tests) * 100).toFixed(1);
                const pagesUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}`;
                
                let comment = `## 🧪 Playwright Test Results
                
                | Metric | Value |
                |--------|-------|
                | 📊 Total Tests | ${summary.tests} |
                | ✅ Passed | ${summary.passed} |
                | ❌ Failed | ${summary.failed} |
                | ⏭️ Skipped | ${summary.skipped} |
                | 📈 Pass Rate | ${passRate}% |
                | ⏱️ Duration | ${summary.stop - summary.start}ms |
                
                📊 **[View Detailed Reports](${pagesUrl})**
                `;
                
                if (summary.failed > 0) {
                  comment += `\n❌ **${summary.failed} test(s) failed!**\n\n## 💥 Failed Tests\n\n| Test Name | Error Message |\n|-----------|---------------|\n`;
                  
                  const failedTests = report.results.tests.filter(test => test.status === 'failed');
                  failedTests.forEach(test => {
                    const errorMsg = (test.message || 'No error message').replace(/\|/g, '\\|').replace(/\n/g, ' ');
                    comment += `| ${test.name} | ${errorMsg} |\n`;
                  });
                  
                  comment += `\nCheck the [detailed HTML report](${pagesUrl}) for more information.`;
                } else {
                  comment += '\n✅ **All tests passed!** Great job! 🎉';
                }
                
                comment += '\n\n---\n*Generated by Playwright CTRF Reporter*';
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Error processing report:', error);
            }

  # Optional: Setup GitHub Pages job for better control
  deploy-pages:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: report
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: false # Disabled since we're using peaceiris/actions-gh-pages
