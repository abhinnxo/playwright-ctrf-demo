name: Playwright Tests with History and GitHub Pages

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Run Playwright Tests
        run: npx playwright test
        env:
          CI: true

      - name: Generate HTML Report
        run: npx playwright show-report
        if: always()

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-html-report
          path: playwright-report/
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download HTML Report
        uses: actions/download-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report/

      - name: Prepare Pages Content
        run: |
          # Create timestamped directory
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          RUN_ID="${{ github.run_id }}"
          mkdir -p public/reports/$TIMESTAMP-$RUN_ID
          cp -r playwright-report/* public/reports/$TIMESTAMP-$RUN_ID/

          # Create or update reports index
          if [ -f "public/reports-index.json" ]; then
            REPORTS_JSON=$(cat public/reports-index.json)
          else
            REPORTS_JSON="[]"
          fi

          # Extract test results summary
          TOTAL_TESTS=$(grep -o '"total": [0-9]*' playwright-report/data.json | cut -d' ' -f2 || echo 0)
          PASSED_TESTS=$(grep -o '"passed": [0-9]*' playwright-report/data.json | cut -d' ' -f2 || echo 0)
          FAILED_TESTS=$(grep -o '"failed": [0-9]*' playwright-report/data.json | cut -d' ' -f2 || echo 0)

          # Create new report entry
          NEW_ENTRY=$(jq -n \
            --arg timestamp "$(date -Iseconds)" \
            --arg directory "$TIMESTAMP-$RUN_ID" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit "${{ github.sha }}" \
            --arg runId "$RUN_ID" \
            --argjson total "$TOTAL_TESTS" \
            --argjson passed "$PASSED_TESTS" \
            --argjson failed "$FAILED_TESTS" \
            '{
              timestamp: $timestamp,
              directory: $directory,
              branch: $branch,
              commit: $commit,
              runId: $runId,
              total: $total,
              passed: $passed,
              failed: $failed,
              status: (if $failed > 0 then "failed" else "passed" end),
              url: ("/reports/" + $directory + "/index.html")
            }')

          # Update reports index (keep last 100 reports)
          echo "$REPORTS_JSON" | jq --argjson new "$NEW_ENTRY" '. = [$new] + . | .[0:100]' > public/reports-index.json

          # Create landing page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Playwright Test Reports</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>
                  .report-card {
                      transition: transform 0.2s;
                  }
                  .report-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
                  }
                  .badge-latest {
                      background-color: #6f42c1;
                  }
                  .status-passed {
                      background-color: #2c8a5a;
                  }
                  .status-failed {
                      background-color: #dc3545;
                  }
                  .commit-hash {
                      font-family: monospace;
                  }
              </style>
          </head>
          <body class="bg-light">
              <div class="container py-5">
                  <div class="text-center mb-5">
                      <h1 class="display-4">ðŸ§ª Playwright Test Reports</h1>
                      <p class="lead">Historical test execution reports</p>
                  </div>
                  
                  <div class="row mb-4">
                      <div class="col-md-6">
                          <div class="card shadow-sm">
                              <div class="card-body">
                                  <h5 class="card-title">Latest Report</h5>
                                  <div id="latest-report"></div>
                              </div>
                          </div>
                      </div>
                      <div class="col-md-6">
                          <div class="card shadow-sm">
                              <div class="card-body">
                                  <h5 class="card-title">Statistics</h5>
                                  <div id="stats-chart" style="height: 200px;"></div>
                              </div>
                          </div>
                      </div>
                  </div>
                  
                  <div class="card shadow-sm mb-4">
                      <div class="card-header">
                          <h5 class="mb-0">All Reports</h5>
                      </div>
                      <div class="card-body">
                          <div class="table-responsive">
                              <table class="table table-hover" id="reports-table">
                                  <thead>
                                      <tr>
                                          <th>Date</th>
                                          <th>Branch</th>
                                          <th>Commit</th>
                                          <th>Tests</th>
                                          <th>Status</th>
                                          <th>Actions</th>
                                      </tr>
                                  </thead>
                                  <tbody id="reports-body">
                                      <!-- Reports will be loaded here -->
                                  </tbody>
                              </table>
                          </div>
                      </div>
                  </div>
              </div>

              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <script>
                  async function loadReports() {
                      try {
                          const response = await fetch('/reports-index.json');
                          const reports = await response.json();
                          
                          // Display latest report
                          if (reports.length > 0) {
                              const latest = reports[0];
                              const latestDiv = document.getElementById('latest-report');
                              latestDiv.innerHTML = `
                                  <p><strong>Run ID:</strong> #${latest.runId}</p>
                                  <p><strong>Date:</strong> ${new Date(latest.timestamp).toLocaleString()}</p>
                                  <p><strong>Branch:</strong> ${latest.branch}</p>
                                  <p><strong>Commit:</strong> <span class="commit-hash">${latest.commit.substring(0, 7)}</span></p>
                                  <p><strong>Results:</strong> ${latest.passed} passed, ${latest.failed} failed of ${latest.total} tests</p>
                                  <a href="${latest.url}" class="btn btn-primary mt-2">
                                      View Full Report
                                  </a>
                              `;
                          }
                          
                          // Populate reports table
                          const tbody = document.getElementById('reports-body');
                          tbody.innerHTML = reports.map(report => `
                              <tr>
                                  <td>${new Date(report.timestamp).toLocaleString()}</td>
                                  <td>${report.branch}</td>
                                  <td><span class="commit-hash">${report.commit.substring(0, 7)}</span></td>
                                  <td>${report.total} total (${report.passed}âœ“ ${report.failed}âœ—)</td>
                                  <td>
                                      <span class="badge rounded-pill status-${report.status}">
                                          ${report.status === 'passed' ? 'Passed' : 'Failed'}
                                      </span>
                                      ${report.runId === reports[0].runId ? '<span class="badge rounded-pill badge-latest">Latest</span>' : ''}
                                  </td>
                                  <td>
                                      <a href="${report.url}" class="btn btn-sm btn-outline-primary">View</a>
                                  </td>
                              </tr>
                          `).join('');
                          
                          // Create stats chart
                          const ctx = document.getElementById('stats-chart').getContext('2d');
                          const last10 = reports.slice(0, 10).reverse();
                          new Chart(ctx, {
                              type: 'line',
                              data: {
                                  labels: last10.map(r => new Date(r.timestamp).toLocaleDateString()),
                                  datasets: [
                                      {
                                          label: 'Passed',
                                          data: last10.map(r => r.passed),
                                          borderColor: '#2c8a5a',
                                          backgroundColor: 'rgba(44, 138, 90, 0.1)',
                                          tension: 0.3
                                      },
                                      {
                                          label: 'Failed',
                                          data: last10.map(r => r.failed),
                                          borderColor: '#dc3545',
                                          backgroundColor: 'rgba(220, 53, 69, 0.1)',
                                          tension: 0.3
                                      }
                                  ]
                              },
                              options: {
                                  responsive: true,
                                  plugins: {
                                      legend: {
                                          position: 'top',
                                      }
                                  },
                                  scales: {
                                      y: {
                                          beginAtZero: true
                                      }
                                  }
                              }
                          });
                      } catch (error) {
                          console.error('Error loading reports:', error);
                          document.getElementById('reports-body').innerHTML = `
                              <tr>
                                  <td colspan="6" class="text-center text-danger">
                                      Error loading reports. Please check console for details.
                                  </td>
                              </tr>
                          `;
                      }
                  }
                  
                  loadReports();
              </script>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "public"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  archive:
    name: Archive to gh-pages branch
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download HTML Report
        uses: actions/download-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report/

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Archive Report
        run: |
          # Create timestamped directory
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          RUN_ID="${{ github.run_id }}"
          mkdir -p gh-pages-content/reports/$TIMESTAMP-$RUN_ID
          cp -r playwright-report/* gh-pages-content/reports/$TIMESTAMP-$RUN_ID/

          # Update reports index
          if git show origin/gh-pages:reports-index.json 2>/dev/null; then
            git show origin/gh-pages:reports-index.json > gh-pages-content/reports-index.json
            REPORTS_JSON=$(cat gh-pages-content/reports-index.json)
          else
            REPORTS_JSON="[]"
          fi

          # Extract test results summary
          TOTAL_TESTS=$(grep -o '"total": [0-9]*' playwright-report/data.json | cut -d' ' -f2 || echo 0)
          PASSED_TESTS=$(grep -o '"passed": [0-9]*' playwright-report/data.json | cut -d' ' -f2 || echo 0)
          FAILED_TESTS=$(grep -o '"failed": [0-9]*' playwright-report/data.json | cut -d' ' -f2 || echo 0)

          # Create new report entry
          NEW_ENTRY=$(jq -n \
            --arg timestamp "$(date -Iseconds)" \
            --arg directory "$TIMESTAMP-$RUN_ID" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit "${{ github.sha }}" \
            --arg runId "$RUN_ID" \
            --argjson total "$TOTAL_TESTS" \
            --argjson passed "$PASSED_TESTS" \
            --argjson failed "$FAILED_TESTS" \
            '{
              timestamp: $timestamp,
              directory: $directory,
              branch: $branch,
              commit: $commit,
              runId: $runId,
              total: $total,
              passed: $passed,
              failed: $failed,
              status: (if $failed > 0 then "failed" else "passed" end),
              url: ("reports/" + $directory + "/index.html")
            }')

          # Update reports index (keep last 100 reports)
          echo "$REPORTS_JSON" | jq --argjson new "$NEW_ENTRY" '. = [$new] + . | .[0:100]' > gh-pages-content/reports-index.json

          # Create landing page
          cp public/index.html gh-pages-content/

      - name: Commit to gh-pages branch
        run: |
          git checkout gh-pages 2>/dev/null || git checkout --orphan gh-pages
          git rm -rf . 2>/dev/null || true
          cp -r gh-pages-content/* .
          git add .
          git commit -m "Update reports with run ${{ github.run_id }}"
          git push origin gh-pages
